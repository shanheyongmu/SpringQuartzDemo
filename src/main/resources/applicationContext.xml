<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<!-- bean -->
	<bean id="study" class="com.shanheyongmu.quartz.Study" />
	
	<!-- 定义调用对象和调用对象的方法  studyDetail也可以是jobTask -->
	<bean id="studyDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	     <!-- 调用的类 -->
	     <property name="targetObject" ref="study"/>
	     <!-- 调用类中的方法 -->
	     <property name="targetMethod" value="doStudy" />
	     <!-- 是否允许任务并发执行。当值为false时 ，表示必须等到前一个线程处理完毕后才再启动一个新的线程-->
	     <property name="concurrent" value="false"/>
	</bean>
	
	
	<!-- quartz-1.8以前的配置 -->
<!--  	<bean id="myjobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	  <property name="jobDetail">
	     <ref bean="studyDetail"/>
	  </property>
	<property name="cronExpression"><value>0/1 * * * * ?</value></property>
	</bean> -->
	
	<!-- quartz-2.x的配置 -->
	<!-- 定义触发时间 -->
	<bean id="myJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail">
	        <ref bean="studyDetail"/>
	    </property>
	    <property name="cronExpression">
	        <value>0/5 * * * * ?</value>
	    </property>
	</bean>
	
	<!-- 总管理类 如果将lazy-init='false'那么容器 启动就会执行调度程序-->
	<!-- 如果lazy-init='true',则需要实例化该bean才能执行调度程序-->
	 <bean name="startQuartz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	       <list>
	          <ref bean="myJobTrigger" />
	       </list>
	    </property>
	    <property name="dataSource">
	       <ref bean="dataSource"/>
	    </property>
	    
	    <property name="applicationContextSchedulerContextKey" value="applicationContextKey"></property>
	    <property name="configLocation" value="classpath:quartz.properties"></property>
	     <property name="autoStartup" value="true"/>
	 </bean>
	 
	 
	 <!--下面是另外一种写法-->
   <!--  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                    <property name="cronExpression">
                        <value>0/5 * * * * ?</value>
                    </property>
                    <property name="jobDetail">
                        　　<bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                            <property name="targetObject" ref="scheduTask"></property>
                            <property name="targetMethod" value="doTask"></property>
                            是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
                            <property name="concurrent" value="false"/>
                        　　</bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean> -->
</beans>
	
	
	